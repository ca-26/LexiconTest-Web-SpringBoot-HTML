################################################################################
####   DB - JPA / Hibernate
################################################################################
spring.jpa.show-sql = true

#spring.jpa.hibernate.ddl-auto - VALUES : none, validate, update, create, create-drop
spring.jpa.hibernate.ddl-auto = none
# /!\ IMPORTANT : Always use ddl-auto = none in PRODUCTION

# ImprovedNamingStrategy converts underscore to CamelCase : first_name (DB) -> firstName (DAO)
# For hibernate4.0 :
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# For hibernate5.0
# TODO : Bug "ImplicitNamingStrategyLegacyJpaImpl" doesn't work --> Need tosetcolumn name in DAO
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/howto-data-access.html
#     By default, Spring Boot configures the physical naming strategy with SpringPhysicalNamingStrategy. This implementation provides the same table structure as Hibernate 4: all dots are replaced by underscores and camel casing is replaced by underscores as well. By default, all table names are generated in lower case, but it is possible to override that flag if your schema requires it.
#     For example, a TelephoneNumber entity is mapped to the telephone_number table.
#     If you prefer to use Hibernate 5\u2019s default instead, set the following property:
#     spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.id.new_generator_mappings = false

spring.jpa.properties.hibernate.show_sql=true
#If turned on, Hibernate will generate comments inside the SQL, for easier debugging, defaults to false. 
spring.jpa.properties.hibernate.use_sql_comments=false
#Pretty print the SQL in the log and console. 
spring.jpa.properties.hibernate.format_sql=false
#To log values:
spring.jpa.properties.hibernate.type=trace
